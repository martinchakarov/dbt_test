name: Transformations with Warehouse check retry
on:
  # schedule:
    # - cron: "30 */6 * * *" # at minute 30 past every 6th hour

  workflow_dispatch:

env:
  SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
  DBT_USER: ${{ secrets.DBT_USER }}
  DBT_PASSWORD: ${{ secrets.DBT_PASSWORD }}

jobs:
  production-run:
    name: Production Run
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pipenv'
      - name: Install Pipenv
        run: |
          pip install --user pipenv
          pipenv install
      - name: Install dbt dependencies
        run: | 
          pipenv run dbt deps --target prod

      - name: Check ingestion warehouse status (initial check)
        id: check_initial
        run: | 
          result=$(pipenv run dbt run-operation check_ingestion_warehouse_status --target prod --args '{"fail_when_active": false}')
          echo "$result"
          if echo "$result" | grep -q 'WARNING: The ingestion warehouse is still active.'; then
            echo "check_result=warning" >> $GITHUB_ENV
          else
            echo "check_result=success" >> $GITHUB_ENV
          fi
        env:
          INGESTION_WAREHOUSE: ${{ secrets.INGESTION_WAREHOUSE }}
        shell: bash

      - name: Wait before retrying warehouse check
        if: ${{ env.check_result == 'warning' }}
        run: |
          echo "Warehouse is active, waiting for 3 minutes before re-checking."
          sleep 180

      - name: Check ingestion warehouse status (2nd attempt)
        if: ${{ env.check_result == 'warning' }}
        run: | 
          result=$(pipenv run dbt run-operation check_ingestion_warehouse_status --target prod --args '{"fail_when_active": false}')
          echo "$result"
          if echo "$result" | grep -q 'WARNING: The ingestion warehouse is still active.'; then
            echo "check_result=warning" >> $GITHUB_ENV
          else
            echo "check_result=success" >> $GITHUB_ENV
          fi
        env:
          INGESTION_WAREHOUSE: ${{ secrets.INGESTION_WAREHOUSE }}
        shell: bash

      - name: Wait before retrying warehouse check
        if: ${{ env.check_result == 'warning' }}
        run: |
          echo "Warehouse is still active, waiting for 3 minutes before final attempt."
          sleep 180

      - name: Check ingestion warehouse status (final attempt)
        if: ${{ env.check_result == 'warning' }}
        id: final_check
        run: |
          pipenv run dbt run-operation check_ingestion_warehouse_status --target prod --args '{"fail_when_active": true}' 2>&1 | tee final_warehouse_check.log
        env:
          INGESTION_WAREHOUSE: ${{ secrets.INGESTION_WAREHOUSE }}
        shell: bash

      - name: Run dbt seed
        if: ${{ success() }}
        id: run_dbt_seed
        run: |
          pipenv run dbt seed --target prod 2>&1 | tee dbt_seed_output.log
        shell: bash

      - name: Run dbt run
        id: run_dbt_models
        if: ${{ success() }}
        run: |
          pipenv run dbt run --target prod 2>&1 | tee dbt_run_output.log
        shell: bash

      - name: Extract errors
        if: ${{ failure() }}
        run: |
          # Extract errors and failures from final_warehouse_check.log
          grep -iE 'ERROR|FAIL' final_warehouse_check.log | tail -n 10 > dbt_errors.log || echo "No errors found in final warehouse check" >> dbt_errors.log
          # Extract errors and failures from dbt_seed_output.log
          grep -iE 'ERROR|FAIL' dbt_seed_output.log | tail -n 10 >> dbt_errors.log || echo "No errors found in dbt seed" >> dbt_errors.log
          # Extract errors and failures from dbt_run_output.log
          grep -iE 'ERROR|FAIL' dbt_run_output.log | tail -n 10 >> dbt_errors.log || echo "No errors found in dbt run" >> dbt_errors.log
        shell: bash

      - name: Send Slack notification
        if: ${{ failure() }}
        run: |
          errors=$(cat dbt_errors.log)
          curl ${{ secrets.SLACK_DBT_NOTIFICATION_WEBHOOK_URL }} \
            --request POST \
            --header 'Content-type: application/json' \
            --data \
              '{
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "${{ github.workflow }} job has failed"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "The following errors prevented the pipeline from finishing successfully:\n```'$errors'```"
                    }
                  },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Navigate to GitHub"
                      },
                      "style": "primary",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  }
                ]
              }'
